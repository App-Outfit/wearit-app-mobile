/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    '/api/v1/auth/signup': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Signup */
        post: operations['signup_api_v1_auth_signup_post'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/api/v1/auth/login': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Login */
        post: operations['login_api_v1_auth_login_post'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/api/v1/auth/google': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Google Auth
         * @description Redirige l'utilisateur vers Google pour l'authentification OAuth2
         */
        get: operations['google_auth_api_v1_auth_google_get'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/api/v1/auth/google/callback': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Google Callback
         * @description Récupère le code de Google et authentifie l'utilisateur
         */
        get: operations['google_callback_api_v1_auth_google_callback_get'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/api/v1/auth/logout': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Logout
         * @description Logout endpoint.
         *     Pour une authentification JWT stateless, le serveur demande simplement au client de supprimer son token.
         */
        post: operations['logout_api_v1_auth_logout_post'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/api/v1/auth/account': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /**
         * Delete Account
         * @description Delete account endpoint.
         *     Supprime le compte de l'utilisateur actuellement connecté.
         */
        delete: operations['delete_account_api_v1_auth_account_delete'];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/api/v1/auth/forgot-password': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Request a password reset code */
        post: operations['forgot_password_api_v1_auth_forgot_password_post'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/api/v1/auth/forgot-password/verify': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Verify the reset code */
        post: operations['verify_reset_code_api_v1_auth_forgot_password_verify_post'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/api/v1/auth/reset-password': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Reset the password */
        post: operations['reset_password_api_v1_auth_reset_password_post'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/api/v1/body/': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List all bodies of the current user */
        get: operations['list_bodies_api_v1_body__get'];
        put?: never;
        /** Upload a new body image and create a record */
        post: operations['create_body_api_v1_body__post'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/api/v1/body/{body_id}': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Retrieve a single body by its ID */
        get: operations['get_body_api_v1_body__body_id__get'];
        put?: never;
        post?: never;
        /** Delete a body image by its ID */
        delete: operations['delete_body_api_v1_body__body_id__delete'];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/api/v1/wardrobe/': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Create Cloth */
        post: operations['create_cloth_api_v1_wardrobe__post'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/api/v1/wardrobe/cloth/{cloth_id}': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Cloth */
        get: operations['get_cloth_api_v1_wardrobe_cloth__cloth_id__get'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/api/v1/wardrobe/clothes/{cloth_type}': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List Clothes */
        get: operations['list_clothes_api_v1_wardrobe_clothes__cloth_type__get'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/api/v1/wardrobe/{cloth_id}': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /** Delete Cloth */
        delete: operations['delete_cloth_api_v1_wardrobe__cloth_id__delete'];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/api/v1/wardrobe/categories': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List Categories
         * @description Liste toutes les catégories de l'utilisateur.
         */
        get: operations['list_categories_api_v1_wardrobe_categories_get'];
        put?: never;
        /**
         * Create Category
         * @description Crée une nouvelle catégorie vide pour l'utilisateur.
         */
        post: operations['create_category_api_v1_wardrobe_categories_post'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/api/v1/wardrobe/outfits': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List Outfits */
        get: operations['list_outfits_api_v1_wardrobe_outfits_get'];
        put?: never;
        /** Create Outfit */
        post: operations['create_outfit_api_v1_wardrobe_outfits_post'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/api/v1/wardrobe/outfits/{outfit_id}': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Outfit */
        get: operations['get_outfit_api_v1_wardrobe_outfits__outfit_id__get'];
        put?: never;
        post?: never;
        /** Delete Outfit */
        delete: operations['delete_outfit_api_v1_wardrobe_outfits__outfit_id__delete'];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/api/v1/tryon/{body_id}/{cloth_id}': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Create Tryon */
        get: operations['create_tryon_api_v1_tryon__body_id___cloth_id__get'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/api/v1/tryon/history': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Tryon History */
        get: operations['get_tryon_history_api_v1_tryon_history_get'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/api/v1/health': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Health Check */
        get: operations['health_check_api_v1_health_get'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        /**
         * AuthDeleteResponse
         * @description Response model after deleting an account.
         */
        AuthDeleteResponse: {
            /**
             * Message
             * @description Message after deleting an account
             * @default Account deleted successfully
             */
            message: string;
        };
        /**
         * AuthGoogleResponse
         * @description Response model after successfully logging in with Google.
         */
        AuthGoogleResponse: {
            /**
             * Message
             * @default Logged in with Google successfully
             */
            message: string;
            /**
             * Token
             * @description JWT token for authentication
             */
            token: string;
        };
        /**
         * AuthLogin
         * @description Request model for logging in.
         */
        AuthLogin: {
            /**
             * Email
             * Format: email
             * @description Email of the user
             */
            email: string;
            /**
             * Password
             * @description Password of the user
             */
            password: string;
        };
        /**
         * AuthLoginResponse
         * @description Response model after successfully logging in.
         */
        AuthLoginResponse: {
            /**
             * Message
             * @default Logged in successfully
             */
            message: string;
            /**
             * Token
             * @description JWT token for authentication
             */
            token: string;
        };
        /**
         * AuthLogoutResponse
         * @description Response model after logging out.
         */
        AuthLogoutResponse: {
            /**
             * Message
             * @description Message after logging out
             * @default Logged out successfully
             */
            message: string;
        };
        /**
         * AuthSignup
         * @description Request model for signing up.
         */
        AuthSignup: {
            /**
             * Email
             * Format: email
             * @description Email of the user
             */
            email: string;
            /**
             * Password
             * @description Password of the user
             */
            password: string;
            /**
             * Name
             * @description Name of the user
             */
            name: string;
            /** Answers */
            answers?: {
                [key: string]: string;
            };
        };
        /**
         * AuthSignupResponse
         * @description Response model after successfully signing up.
         */
        AuthSignupResponse: {
            /**
             * Message
             * @default Signed up successfully
             */
            message: string;
            /**
             * Token
             * @description JWT token for authentication
             */
            token: string;
        };
        /**
         * BodyCreateResponse
         * @description Response model after successfully creating a body.
         */
        BodyCreateResponse: {
            /**
             * Id
             * Format: uuid
             * @description Unique ID of the body
             */
            id: string;
            /**
             * Message
             * @default Body created successfully
             */
            message: string;
            /**
             * Created At
             * Format: date-time
             */
            created_at: string;
            /**
             * Image Url
             * Format: uri
             * @description URL of the body image
             */
            image_url: string;
        };
        /**
         * BodyDeleteResponse
         * @description Response model after deleting a body.
         */
        BodyDeleteResponse: {
            /**
             * Message
             * @default Body deleted successfully
             */
            message: string;
        };
        /**
         * BodyListResponse
         * @description Response model when fetching multiple bodies.
         */
        BodyListResponse: {
            /** Bodies */
            bodies: components['schemas']['BodyResponse'][];
        };
        /**
         * BodyResponse
         * @description Response model when fetching a body.
         */
        BodyResponse: {
            /**
             * User Id
             * Format: uuid
             * @description User ID of the body owner
             */
            user_id: string;
            /**
             * Id
             * Format: uuid
             * @description Unique ID of the body
             */
            id: string;
            /**
             * Image Url
             * Format: uri
             * @description URL of the body image
             */
            image_url: string;
        };
        /** Body_create_body_api_v1_body__post */
        Body_create_body_api_v1_body__post: {
            /**
             * File
             * Format: binary
             */
            file: string;
        };
        /** Body_create_category_api_v1_wardrobe_categories_post */
        Body_create_category_api_v1_wardrobe_categories_post: {
            /** Name */
            name: string;
        };
        /** Body_create_cloth_api_v1_wardrobe__post */
        Body_create_cloth_api_v1_wardrobe__post: {
            /** Name */
            name: string;
            /** Type */
            type: string;
            /**
             * Tags
             * @default []
             */
            tags: string[];
            /**
             * File
             * Format: binary
             */
            file: string;
        };
        /** Body_create_outfit_api_v1_wardrobe_outfits_post */
        Body_create_outfit_api_v1_wardrobe_outfits_post: {
            /**
             * Body Id
             * Format: uuid
             */
            body_id: string;
            /** Cloth Ids */
            cloth_ids: string[];
        };
        /** CategoryListResponse */
        CategoryListResponse: {
            /** Categories */
            categories: components['schemas']['CategoryResponse'][];
        };
        /** CategoryResponse */
        CategoryResponse: {
            /**
             * Id
             * Format: uuid
             */
            id: string;
            /** User Id */
            user_id: string;
            /** Name */
            name: string;
            /**
             * Created At
             * Format: date-time
             */
            created_at: string;
        };
        /** ClothCreateResponse */
        ClothCreateResponse: {
            /**
             * Id
             * Format: uuid
             */
            id: string;
            /** Image Url */
            image_url: string;
            /** Tags */
            tags: string[];
            /**
             * Created At
             * Format: date-time
             */
            created_at: string;
            /** Message */
            message: string;
        };
        /** ClothDeleteResponse */
        ClothDeleteResponse: {
            /** Message */
            message: string;
        };
        /** ClothListResponse */
        ClothListResponse: {
            /** Clothes */
            clothes: components['schemas']['ClothResponse'][];
        };
        /** ClothResponse */
        ClothResponse: {
            /**
             * Id
             * Format: uuid
             */
            id: string;
            /** User Id */
            user_id: string;
            /** Name */
            name: string;
            /** Type */
            type: string;
            /** Image Url */
            image_url: string;
            /** Tags */
            tags: string[];
        };
        /** ForgotPasswordRequest */
        ForgotPasswordRequest: {
            /**
             * Email
             * Format: email
             * @description The email address where the reset code will be sent
             */
            email: string;
        };
        /** ForgotPasswordResponse */
        ForgotPasswordResponse: {
            /**
             * Message
             * @description Confirmation that a reset code has been sent
             */
            message: string;
        };
        /** HTTPValidationError */
        HTTPValidationError: {
            /** Detail */
            detail?: components['schemas']['ValidationError'][];
        };
        /** OutfitCreateResponse */
        OutfitCreateResponse: {
            /**
             * Id
             * Format: uuid
             */
            id: string;
            /**
             * Body Id
             * Format: uuid
             */
            body_id: string;
            /** Cloth Ids */
            cloth_ids: string[];
            /**
             * Created At
             * Format: date-time
             */
            created_at: string;
            /** Message */
            message: string;
        };
        /** OutfitDeleteResponse */
        OutfitDeleteResponse: {
            /** Message */
            message: string;
        };
        /** OutfitListResponse */
        OutfitListResponse: {
            /** Outfits */
            outfits: components['schemas']['OutfitResponse'][];
        };
        /** OutfitResponse */
        OutfitResponse: {
            /**
             * Id
             * Format: uuid
             */
            id: string;
            /** User Id */
            user_id: string;
            /**
             * Body Id
             * Format: uuid
             */
            body_id: string;
            /** Cloth Ids */
            cloth_ids: string[];
            /**
             * Created At
             * Format: date-time
             */
            created_at: string;
        };
        /** ResetPasswordRequest */
        ResetPasswordRequest: {
            /**
             * Email
             * Format: email
             * @description The email address associated with the account
             */
            email: string;
            /**
             * Code
             * @description 4‑digit reset code received by email
             */
            code: string;
            /**
             * New Password
             * @description New password (at least 8 characters)
             */
            new_password: string;
        };
        /** ResetPasswordResponse */
        ResetPasswordResponse: {
            /**
             * Message
             * @description Confirmation that the password has been successfully reset
             */
            message: string;
        };
        /**
         * TryonListResponse
         * @description Response model when fetching multiple try-ons.
         */
        TryonListResponse: {
            /** Tryons */
            tryons: components['schemas']['TryonResponse'][];
        };
        /**
         * TryonResponse
         * @description Response model
         */
        TryonResponse: {
            /**
             * Body Id
             * Format: uuid
             * @description ID of the body to try on
             */
            body_id: string;
            /**
             * Cloth Id
             * Format: uuid
             * @description ID of the cloth to try on
             */
            cloth_id: string;
            /**
             * Id
             * Format: uuid
             * @description Unique ID of the tryon
             */
            id: string;
            /**
             * Image Url
             * Format: uri
             * @description URL of the try-on image
             */
            image_url: string;
        };
        /** ValidationError */
        ValidationError: {
            /** Location */
            loc: (string | number)[];
            /** Message */
            msg: string;
            /** Error Type */
            type: string;
        };
        /** VerifyResetCodeRequest */
        VerifyResetCodeRequest: {
            /**
             * Email
             * Format: email
             * @description The email address associated with the account
             */
            email: string;
            /**
             * Code
             * @description 4‑digit reset code received by email
             */
            code: string;
        };
        /** VerifyResetCodeResponse */
        VerifyResetCodeResponse: {
            /**
             * Valid
             * @description Whether the provided reset code is valid
             */
            valid: boolean;
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    signup_api_v1_auth_signup_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': components['schemas']['AuthSignup'];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['AuthSignupResponse'];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
        };
    };
    login_api_v1_auth_login_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': components['schemas']['AuthLogin'];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['AuthLoginResponse'];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
        };
    };
    google_auth_api_v1_auth_google_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': unknown;
                };
            };
        };
    };
    google_callback_api_v1_auth_google_callback_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['AuthGoogleResponse'];
                };
            };
        };
    };
    logout_api_v1_auth_logout_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['AuthLogoutResponse'];
                };
            };
        };
    };
    delete_account_api_v1_auth_account_delete: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['AuthDeleteResponse'];
                };
            };
        };
    };
    forgot_password_api_v1_auth_forgot_password_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': components['schemas']['ForgotPasswordRequest'];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['ForgotPasswordResponse'];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
        };
    };
    verify_reset_code_api_v1_auth_forgot_password_verify_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': components['schemas']['VerifyResetCodeRequest'];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['VerifyResetCodeResponse'];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
        };
    };
    reset_password_api_v1_auth_reset_password_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': components['schemas']['ResetPasswordRequest'];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['ResetPasswordResponse'];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
        };
    };
    list_bodies_api_v1_body__get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['BodyListResponse'];
                };
            };
        };
    };
    create_body_api_v1_body__post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                'multipart/form-data': components['schemas']['Body_create_body_api_v1_body__post'];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['BodyCreateResponse'];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
        };
    };
    get_body_api_v1_body__body_id__get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                body_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['BodyResponse'];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
        };
    };
    delete_body_api_v1_body__body_id__delete: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                body_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['BodyDeleteResponse'];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
        };
    };
    create_cloth_api_v1_wardrobe__post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                'multipart/form-data': components['schemas']['Body_create_cloth_api_v1_wardrobe__post'];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['ClothCreateResponse'];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
        };
    };
    get_cloth_api_v1_wardrobe_cloth__cloth_id__get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                cloth_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['ClothResponse'];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
        };
    };
    list_clothes_api_v1_wardrobe_clothes__cloth_type__get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                cloth_type: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['ClothListResponse'];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
        };
    };
    delete_cloth_api_v1_wardrobe__cloth_id__delete: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                cloth_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['ClothDeleteResponse'];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
        };
    };
    list_categories_api_v1_wardrobe_categories_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['CategoryListResponse'];
                };
            };
        };
    };
    create_category_api_v1_wardrobe_categories_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/x-www-form-urlencoded': components['schemas']['Body_create_category_api_v1_wardrobe_categories_post'];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['CategoryResponse'];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
        };
    };
    list_outfits_api_v1_wardrobe_outfits_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['OutfitListResponse'];
                };
            };
        };
    };
    create_outfit_api_v1_wardrobe_outfits_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/x-www-form-urlencoded': components['schemas']['Body_create_outfit_api_v1_wardrobe_outfits_post'];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['OutfitCreateResponse'];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
        };
    };
    get_outfit_api_v1_wardrobe_outfits__outfit_id__get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                outfit_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['OutfitResponse'];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
        };
    };
    delete_outfit_api_v1_wardrobe_outfits__outfit_id__delete: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                outfit_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['OutfitDeleteResponse'];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
        };
    };
    create_tryon_api_v1_tryon__body_id___cloth_id__get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                body_id: string;
                cloth_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['TryonResponse'];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
        };
    };
    get_tryon_history_api_v1_tryon_history_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['TryonListResponse'];
                };
            };
        };
    };
    health_check_api_v1_health_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': unknown;
                };
            };
        };
    };
}
